//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider   = "postgresql"
  url        = env("DB_URL")
  extensions = [vector]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "postgresqlExtensions"]
  binaryTargets   = ["native", "linux-arm64-openssl-3.0.x"]
}

generator zod {
  provider                         = "zod-prisma-types"
  createOptionalDefaultValuesTypes = true
  createRelationValuesTypes        = true
  createPartialTypes               = true
}

generator json {
  provider = "prisma-json-types-generator"
}

enum InstanceFeature {
  TASKS
  SHIFT_PLANNING
  ATTENDANCE
  AI
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum LaborRuleInterval {
  BEFORE
  BETWEEN
  AFTER
}

enum UserOnOrganizationOccupation {
  SUPERVISOR
  WORKER
  GUEST
}

enum BoardLayoutAccess {
  PRIVATE
  PUBLIC
}

enum UserInvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  REVOKED
}

/// @@allow('delete', true)
/// @@allow('all', true)
model File {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @id() @default(autoincrement())
  /// File name
  name            String
  /// File type
  type            String
  /// File size
  size            Int
  /// File path
  path            String    @unique()
  /// A note for the file
  note            String?
  comments        Comment[]
  /// Instance ID (Logo)
  instanceId      Int?      @unique()
  /// Instance (Logo)
  instance        Instance? @relation(fields: [instanceId], references: [id])
  /// Task ID
  taskId          Int?
  /// Task
  task            Task?     @relation(fields: [taskId], references: [id])
  /// User Avatar
  user            User?     @relation("Avatar")
}

/// @@allow('delete', true)
/// @@allow('read', true)
/// @@allow('create', true)
/// @@allow('update', auth().id == id)
/// @@deny('delete', true)
/// @@auth
model Account {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime   @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean    @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int        @id() @default(autoincrement())
  /// Account's first name
  /// @zod.string.min(1)
  firstName       String
  /// Account's last name
  /// @zod.string.min(1)
  lastName        String
  /// Account's email
  /// @zod.string.email()
  email           String     @unique()
  /// @omit
  /// Account's password
  password        String?
  /// Account's owned instances (~Â is the owner of the instance)
  ownedInstances  Instance[] @relation(name: "OwnedInstances")
  /// Account's users
  users           User[]
}

/// @@allow('delete', true)
/// @@allow('read', ownerId == auth().id || users?[accountId == auth().id] || invitations?[email == auth().email && status == 'PENDING'])
/// @@allow('create', true)
/// @@allow('update', ownerId == auth().id)
model Instance {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt          DateTime            @default(now())
  /// Identifier of the account who created the record
  createdById        Int?
  /// Identifier of the user who created the record
  createdByUserId    Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt          DateTime?
  /// Identifier of the account who last updated the record
  updatedById        Int?
  /// Identifier of the user who last updated the record
  updatedByUserId    Int?
  /// Indicates whether the record is marked as deleted
  deleted            Boolean             @default(false)
  /// Date and time of deletion of the record
  deletedAt          DateTime?
  /// Identifier of the account who deleted the record
  deletedById        Int?
  /// Identifier of the user who deleted the record
  deletedByUserId    Int?
  id                 Int                 @id() @default(autoincrement())
  /// Name of the instance
  /// @zod.string.min(1)
  name               String
  /// Description of the instance
  description        String              @default("")
  /// Domain name of the instance
  /// @zod.string.min(1)
  domainName         String              @unique()
  /// Features of the instance
  features           InstanceFeature[]
  /// Whether the instance is public or not
  isPublic           Boolean             @default(false)
  /// Activity types of the instance
  activityTypes      ActivityType[]
  /// AI Agents
  aiAgents           AiAgent[]
  /// AI Embeddings
  aiEmbeddings       AiEmbedding[]
  /// AI Tools
  aiTools            AiTool[]
  /// AI Threads
  aiThreads          AiThread[]
  /// Boards of the instance
  boards             Board[]
  /// Comments of the instance
  comments           Comment[]
  /// Custom fields of the instance
  customFields       CustomField[]
  /// Enumerators of the instance
  enumerators        Enumerator[]
  /// Invitations of the instance
  invitations        UserInvitation[]
  /// Labor rules of the instance
  laborRules         LaborRule[]
  /// Logo of the instance
  logo               File?
  /// Notes of the instance
  notes              Note[]
  /// ID of the owner of the instance (accountId)
  ownerId            Int
  /// Owner of the instance (account)
  owner              Account             @relation(name: "OwnedInstances", fields: [ownerId], references: [id])
  /// Organizations of the instance
  organizations      Organization[]
  /// Planning of the instance
  planning           Planning[]
  /// Planning stages of the instance
  planningStages     PlanningStage[]
  /// Planning stage rules
  planningStageRules PlanningStageRule[]
  /// Roles of the instance
  roles              Role[]
  /// Table layouts of the instance
  tableLayouts       TableLayout[]
  /// Tags of the instance
  tags               Tag[]
  /// Tasks of the instance
  tasks              Task[]
  /// Users of the instance
  users              User[]
  /// Workflows of the instance
  workflows          Workflow[]
}

/// @@allow('delete', true)
/// @@allow('read', instance.users?[accountId == auth().id])
model ActivityType {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt        DateTime   @default(now())
  /// Identifier of the account who created the record
  createdById      Int?
  /// Identifier of the user who created the record
  createdByUserId  Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt        DateTime?
  /// Identifier of the account who last updated the record
  updatedById      Int?
  /// Identifier of the user who last updated the record
  updatedByUserId  Int?
  /// Indicates whether the record is marked as deleted
  deleted          Boolean    @default(false)
  /// Date and time of deletion of the record
  deletedAt        DateTime?
  /// Identifier of the account who deleted the record
  deletedById      Int?
  /// Identifier of the user who deleted the record
  deletedByUserId  Int?
  id               Int        @id() @default(autoincrement())
  /// Name of the activity type
  /// @zod.string.min(1)
  name             String
  /// Description of the activity type
  description      String?
  /// Style of the Activity type
  /// [IStyle]
  style            Json?
  /// Default duration of the activity type
  /// @zod.number.min(0)
  defaultDuration  Int?
  /// Default workbreak of the activity type
  /// @zod.number.min(0)
  defaultWorkbreak Int?
  /// Whether the activity type requires approval
  approvalNeeded   Boolean    @default(false)
  /// Whether the activity type is highlighted (use for important activities)
  highlight        Boolean    @default(false)
  /// Whether the activity type is marketable
  marketable       Boolean    @default(false)
  activities       Activity[]
  /// The instance ID this activityType belongs to
  instanceId       Int
  /// The instance this activityType belongs to
  instance         Instance   @relation(fields: [instanceId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('read', organization.users?[user.accountId == auth().id])
model Activity {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt          DateTime                   @default(now())
  /// Identifier of the account who created the record
  createdById        Int?
  /// Identifier of the user who created the record
  createdByUserId    Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt          DateTime?
  /// Identifier of the account who last updated the record
  updatedById        Int?
  /// Identifier of the user who last updated the record
  updatedByUserId    Int?
  /// Indicates whether the record is marked as deleted
  deleted            Boolean                    @default(false)
  /// Date and time of deletion of the record
  deletedAt          DateTime?
  /// Identifier of the account who deleted the record
  deletedById        Int?
  /// Identifier of the user who deleted the record
  deletedByUserId    Int?
  id                 Int                        @id() @default(autoincrement())
  /// Name of the activity
  /// @zod.string.min(1)
  name               String
  /// Description of the activity
  description        String?
  /// Date (and time) of the activity
  datetime           DateTime
  /// Duration of the activity (in ms)
  /// @zod.number.min(0)
  duration           Int
  /// Duration of wokrbreak (in ms)
  /// @zod.number.min(0)
  workbreakDuration  Int
  /// Whether the activity requires attendance logging
  requiresAttendance Boolean                    @default(false)
  /// ID of the activity type
  typeId             Int
  /// Activity type of the activity
  type               ActivityType               @relation(fields: [typeId], references: [id])
  /// Attendance
  attendance         Attendance[]
  /// ID of the organization
  organizationId     Int
  /// Organization of the activity
  organization       Organization               @relation(fields: [organizationId], references: [id])
  /// Planning ID of the activity
  planningId         Int?
  /// Planning of the activity
  planning           Planning?                  @relation(fields: [planningId], references: [id])
  /// Acttivity staff requirements
  staffRequirements  ActivityStaffRequirement[]
  /// Activity tasks
  tasks              Task[]
  /// Tags
  tags               Tag[]
}

/// @@allow('delete', true)
/// @@allow('read', user.instance.ownerId == auth().id || user.instance.users?[accountId == auth().id])
/// @@allow('create', user.instance.ownerId == auth().id || user.instance.users?[accountId == auth().id] || task.board.organizations?[organization.users?[user.accountId == auth().id]])
/// @@allow('update', user.instance.ownerId == auth().id || user.instance.users?[accountId == auth().id] || task.board.organizations?[organization.users?[user.accountId == auth().id]])
model Attendance {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @id() @default(autoincrement())
  /// Time of attendance start
  from            DateTime
  /// Time of attendance end
  to              DateTime?
  activityId      Int?
  /// Attendance activity
  activity        Activity? @relation(fields: [activityId], references: [id])
  /// Attendance notes
  notes           Note[]
  /// Task ID
  taskId          Int?
  /// Task
  task            Task?     @relation(fields: [taskId], references: [id])
  /// Attendance user ID
  userId          Int
  /// Attendance user
  user            User      @relation(fields: [userId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('read', instance.users?[accountId == auth().id])
model Note {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt                 DateTime                 @default(now())
  /// Identifier of the account who created the record
  createdById               Int?
  /// Identifier of the user who created the record
  createdByUserId           Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt                 DateTime?
  /// Identifier of the account who last updated the record
  updatedById               Int?
  /// Identifier of the user who last updated the record
  updatedByUserId           Int?
  /// Indicates whether the record is marked as deleted
  deleted                   Boolean                  @default(false)
  /// Date and time of deletion of the record
  deletedAt                 DateTime?
  /// Identifier of the account who deleted the record
  deletedById               Int?
  /// Identifier of the user who deleted the record
  deletedByUserId           Int?
  id                        Int                      @id() @default(autoincrement())
  /// Note message
  /// @zod.string.min(1)
  message                   String
  /// Id of the UserOnActivity that this note is associated with
  activityStaffAssignmentId Int?
  /// UserOnActivity that this note is associated with
  activityStaffAssignment   ActivityStaffAssignment? @relation(fields: [activityStaffAssignmentId], references: [id])
  /// The instance ID this organization belongs to
  instanceId                Int
  /// The instance this organization belongs to
  instance                  Instance                 @relation(fields: [instanceId], references: [id])
  /// The attendance ID this note is associated with
  attendanceId              Int?
  /// The attendance this note is associated with
  attendance                Attendance?              @relation(fields: [attendanceId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('read', user.instance.users?[accountId == auth().id])
model ActivityStaffAssignment {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt                  DateTime                 @default(now())
  /// Identifier of the account who created the record
  createdById                Int?
  /// Identifier of the user who created the record
  createdByUserId            Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt                  DateTime?
  /// Identifier of the account who last updated the record
  updatedById                Int?
  /// Identifier of the user who last updated the record
  updatedByUserId            Int?
  /// Indicates whether the record is marked as deleted
  deleted                    Boolean                  @default(false)
  /// Date and time of deletion of the record
  deletedAt                  DateTime?
  /// Identifier of the account who deleted the record
  deletedById                Int?
  /// Identifier of the user who deleted the record
  deletedByUserId            Int?
  id                         Int                      @unique() @default(autoincrement())
  /// Whether the user is approved to be on the activity
  approved                   Boolean                  @default(false)
  /// Activity which user is on
  activityStaffRequirement   ActivityStaffRequirement @relation(fields: [activityStaffRequirementId], references: [id])
  /// Notes about the user on the activity
  notes                      Note[]
  /// ID of user who is on the activity
  userId                     Int
  /// User who is on the activity
  user                       User                     @relation(fields: [userId], references: [id])
  /// ID of activity which user is on
  activityStaffRequirementId Int

  @@id(name: "compositeId", fields: [userId, activityStaffRequirementId])
}

/// @@allow('delete', true)
/// @@allow('read', instance.ownerId == auth().id || instance.users?[accountId == auth().id])
/// @@allow('create', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'user:create' || name == 'all:create']]])
/// @@allow('update', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'user:update' || name == 'all:update']]])
model User {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime                  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean                   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int                       @id() @default(autoincrement())
  /// The user's first name
  /// @zod.string.min(1)
  firstName       String
  /// The user's last name
  /// @zod.string.min(1)
  lastName        String
  /// User's attendance
  attendance      Attendance[]
  /// User's activities
  activities      ActivityStaffAssignment[]
  /// User's contacts
  contacts        Contact[]
  /// The user's global user ID
  accountId       Int?
  /// The user's global user
  account         Account?                  @relation(fields: [accountId], references: [id])
  /// The user's avatar file ID
  avatarId        Int?                      @unique()
  /// The user's avatar file
  avatar          File?                     @relation("Avatar", fields: [avatarId], references: [id])
  /// The instance ID this user belongs to
  instanceId      Int
  /// The instance this user belongs to
  instance        Instance                  @relation(fields: [instanceId], references: [id])
  /// The user invitation
  /// The user invitation
  invitation      UserInvitation?
  /// The user's organizations (explicit N-N)
  organizations   UserOnOrganization[]
  /// The user's options
  options         UserOptions?
  /// The user's roles
  roles           Role[]
  /// The user's saved table layouts
  tableLayouts    TableLayout[]
  /// The user's tasks
  tasks           TaskAssignment[]
}

/// @@allow('delete', true)
/// @@allow('read', user.instance.users?[accountId == auth().id])
/// @@allow('create', userId == auth().id || user.instance.ownerId == auth().id || user.instance.users?[accountId == auth().id && roles?[claims?[name == 'contact:update' || name == 'all:update']]])
/// @@allow('update', userId == auth().id || user.instance.ownerId == auth().id || user.instance.users?[accountId == auth().id && roles?[claims?[name == 'contact:update' || name == 'all:update']]])
model Contact {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime         @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean          @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int              @id() @default(autoincrement())
  /// Contact value
  value           String
  /// Contact type ID (Enumerator option ID)
  typeId          Int
  /// Contact type (Enumerator option)
  type            EnumeratorOption @relation(fields: [typeId], references: [id])
  /// User ID that is attached to this contact
  userId          Int?
  /// User that is attached to this contact
  user            User?            @relation(fields: [userId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('read', enumerator.instance.ownerId == auth().id || enumerator.instance.users?[accountId == auth().id])
/// @@allow('create', enumerator.instance.ownerId == auth().id || enumerator.instance.users?[accountId == auth().id && roles?[claims?[name == 'enumeratorOption:create' || name == 'all:create']]])
/// @@allow('update', enumerator.instance.ownerId == auth().id || enumerator.instance.users?[accountId == auth().id && roles?[claims?[name == 'enumeratorOption:update' || name == 'all:update']]])
model EnumeratorOption {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime      @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean       @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int           @id() @default(autoincrement())
  /// Name of the option
  /// @zod.string.min(1)
  name            String
  /// Description of the option
  description     String?
  /// Style of the option
  /// [IStyle]
  style           Json?         @default("{}")
  /// Icon of the option
  icon            String?
  /// Board columns that have this option as `statuses`
  boardColumns    BoardColumn[] @relation("BoardColumns")
  /// Contacts that have this option as `ContactType`
  contacts        Contact[]
  /// Enumerator ID this option belongs to
  enumeratorId    Int
  /// Enumerator this option belongs to
  enumerator      Enumerator    @relation(fields: [enumeratorId], references: [id])
  /// Tasks that have this option as `Priority`
  tasksPriorities Task[]        @relation("TaskPriority")
  /// Tasks that have this option as `Status`
  tasksStatuses   Task[]        @relation("TaskStatus")
  /// Tasks that have this option as `Type`
  taskTypes       Task[]        @relation("TaskType")
  /// Workflows of this option
  workflows       Workflow[]
}

/// @@allow('delete', true)
/// @@allow('read', board.instance.ownerId == auth().id || board.instance.users?[accountId == auth().id])
/// @@allow('create', board.instance.ownerId == auth().id || board.instance.users?[accountId == auth().id && roles?[claims?[name == 'boardColumn:create' || name == 'all:create']]])
/// @@allow('update', board.instance.ownerId == auth().id || board.instance.users?[accountId == auth().id && roles?[claims?[name == 'boardColumn:update' || name == 'all:update']]])
model BoardColumn {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime           @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean            @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int                @id() @default(autoincrement())
  /// Board column name
  name            String
  /// Board ID to which this column belongs
  boardId         Int
  /// Board to which this column belongs
  board           Board              @relation(fields: [boardId], references: [id])
  /// Column statuses
  statuses        EnumeratorOption[] @relation("BoardColumns")
  /// Style of the BoardColumn
  /// [IStyle]
  style           Json?
}

/// @@allow('delete', true)
/// @@allow('read', instance.ownerId == auth().id || organizations?[organization.users?[user.accountId == auth().id]])
/// @@allow('create', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'board:create' || name == 'all:create']]])
/// @@allow('update', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'board:update' || name == 'all:update']]])
model Board {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime              @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean               @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int                   @id() @default(autoincrement())
  /// The name of the board
  name            String
  /// Description of the board
  description     String?
  /// The columns that belong to this board
  columns         BoardColumn[]
  /// The instance ID this organization belongs to
  instanceId      Int
  /// The instance this organization belongs to
  instance        Instance              @relation(fields: [instanceId], references: [id])
  /// Default layout schema of the board
  layouts         BoardLayout[]
  /// The organization that this board belongs to
  organizations   BoardOnOrganization[]
  /// The tasks that belong to this board
  tasks           Task[]
}

/// @@allow('delete', true)
/// @@allow('read', board.instance.ownerId == auth().id || board.instance.users?[accountId == auth().id])
/// @@allow('create', board.instance.ownerId == auth().id || board.instance.users?[accountId == auth().id && roles?[claims?[name == 'boardOnOrganization:create' || name == 'all:create']]])
/// @@allow('update', board.instance.ownerId == auth().id || board.instance.users?[accountId == auth().id && roles?[claims?[name == 'boardOnOrganization:update' || name == 'all:update']]])
model BoardOnOrganization {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime     @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean      @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int          @id() @default(autoincrement())
  /// The board ID
  boardId         Int
  /// Board
  board           Board        @relation(fields: [boardId], references: [id])
  /// The organization ID
  organizationId  Int
  /// Organization
  organization    Organization @relation(fields: [organizationId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('read', instance.ownerId == auth().id || instance.users?[accountId == auth().id])
/// @@allow('create', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'organization:create' || name == 'all:create']]])
/// @@allow('update', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'organization:update' || name == 'all:update']]])
model Organization {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt         DateTime              @default(now())
  /// Identifier of the account who created the record
  createdById       Int?
  /// Identifier of the user who created the record
  createdByUserId   Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt         DateTime?
  /// Identifier of the account who last updated the record
  updatedById       Int?
  /// Identifier of the user who last updated the record
  updatedByUserId   Int?
  /// Indicates whether the record is marked as deleted
  deleted           Boolean               @default(false)
  /// Date and time of deletion of the record
  deletedAt         DateTime?
  /// Identifier of the account who deleted the record
  deletedById       Int?
  /// Identifier of the user who deleted the record
  deletedByUserId   Int?
  id                Int                   @id() @default(autoincrement())
  /// Name of the organization
  /// @zod.string.min(1).max(100)
  name              String
  /// Short name of the organization
  /// @zod.string.min(1)
  shortcutName      String
  /// Style of the Organization
  /// [IStyle]
  style             Json?
  /// First day of the week for the organization
  firstActivityDay  Day                   @default(MONDAY)
  /// The time for the first activity of the day (HH:mm format)
  firstActivityTime String                @default("00:00")
  /// Activities on the organization
  activities        Activity[]
  /// Boards on the organization
  boards            BoardOnOrganization[]
  /// The instance ID this organization belongs to
  instanceId        Int
  /// The instance this organization belongs to
  instance          Instance              @relation(fields: [instanceId], references: [id])
  /// ID of the parent organization
  parentId          Int?                  @unique()
  /// The parent organization
  parent            Organization?         @relation("OrganizationToOrganization", fields: [parentId], references: [id])
  /// The children organizations
  children          Organization[]        @relation("OrganizationToOrganization")
  /// The organization's labor rules
  laborRules        LaborRule[]
  /// Users on the organization (N-N explicit)
  users             UserOnOrganization[]
}

/// @@allow('delete', true)
/// @@allow('read', instance.users?[accountId == auth().id])
model LaborRule {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime           @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean            @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int                @id() @default(autoincrement())
  /// Name of the labor rule
  /// @zod.string.min(1)
  name            String
  /// Description of the labor rule
  description     String?
  /// The time period for which the labor rule is applicable (in ms)
  /// Either `period` or `LaborRuleInterval` should be provided
  period          Int?
  /// The interval for which the labor rule is applicable
  /// Either `period` or `LaborRuleInterval` should be provided
  interval        LaborRuleInterval?
  /// Duration of the rest/break during the period that needs to be followed (in ms)
  restDuration    Int
  /// The instance ID this labor rule belongs to
  instanceId      Int
  /// The instance this labor rule belongs to
  instance        Instance           @relation(fields: [instanceId], references: [id])
  /// The organizations that have this labor rule
  organizations   Organization[]
}

/// @@allow('delete', true)
/// @@allow('read', user.instance.ownerId == auth().id || user.instance.users?[accountId == auth().id])
/// @@allow('create', user.instance.ownerId == auth().id || user.instance.users?[accountId == auth().id && roles?[claims?[name == 'userOnOrganization:create' || name == 'all:create']]])
/// @@allow('update', user.instance.ownerId == auth().id || user.instance.users?[accountId == auth().id && roles?[claims?[name == 'userOnOrganization:update' || name == 'all:update']]])
model UserOnOrganization {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime     @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean      @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int          @unique() @default(autoincrement())
  /// The occupation of the user on the organization, e.g. supervisor, worker
  /// The organization ID the user is part of
  organizationId  Int
  /// The user that is part of the organization
  organization    Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  /// The user ID that is part of the organization
  userId          Int
  /// The user that is part of the organization
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id(name: "compositeId", fields: [userId, organizationId])
}

/// @@allow('delete', true)
/// @@allow('read', instance.ownerId == auth().id || instance.users?[accountId == auth().id])
/// @@allow('create', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'task:create' || name == 'all:create']]] || board.organizations?[organization.users?[user.accountId == auth().id]])
/// @@allow('update', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'task:update' || name == 'all:update']]] || board.organizations?[organization.users?[user.accountId == auth().id]])
/// @@allow('delete', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'account:delete' || name == 'all:delete']]] || board.organizations?[organization.users?[user.accountId == auth().id]])
model Task {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt        DateTime          @default(now())
  /// Identifier of the account who created the record
  createdById      Int?
  /// Identifier of the user who created the record
  createdByUserId  Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt        DateTime?
  /// Identifier of the account who last updated the record
  updatedById      Int?
  /// Identifier of the user who last updated the record
  updatedByUserId  Int?
  /// Indicates whether the record is marked as deleted
  deleted          Boolean           @default(false)
  /// Date and time of deletion of the record
  deletedAt        DateTime?
  /// Identifier of the account who deleted the record
  deletedById      Int?
  /// Identifier of the user who deleted the record
  deletedByUserId  Int?
  id               Int               @id() @default(autoincrement())
  /// Archived at
  archivedAt       DateTime?
  /// The name of the task
  /// @zod.string.min(1)
  name             String
  /// Custom fields
  /// [ICustomField]
  customFields     Json[]            @default([])
  /// The description of the task (HTML allowed)
  description      String?
  /// The date the task was completed
  doneDate         DateTime?
  /// The due date of the task
  dueDate          DateTime?
  /// The estimated time to complete the task
  estimateDuration Int?
  /// When true, the task is considered a template
  isTemplate       Boolean           @default(false)
  /// Position
  /// @zod.custom.omit([input])
  position         Int
  /// Serial number of the task, each board has a separate range of serial numbers
  /// @zod.custom.omit([input])
  uuid             String
  /// The activity ID this task belongs to
  activityId       Int?
  /// The activity this task belongs to
  activity         Activity?         @relation(fields: [activityId], references: [id])
  /// Attendance
  attendance       Attendance[]
  /// The users assigned to the task
  assignedTo       TaskAssignment[]
  /// The board ID this task belongs to
  boardId          Int?
  /// The board this task belongs to
  board            Board?            @relation(fields: [boardId], references: [id])
  /// Comments
  comments         Comment[]
  /// Files
  files            File[]
  /// The instance ID this task belongs to
  instanceId       Int
  /// The instance this task belongs to
  instance         Instance          @relation(fields: [instanceId], references: [id])
  /// The parent task ID
  parentId         Int?
  /// The parent task
  parent           Task?             @relation("SubTasks", fields: [parentId], references: [id])
  /// Children tasks
  children         Task[]            @relation("SubTasks")
  /// The priority ID of the task (EnumeratorOptionId)
  priorityId       Int?
  /// The priority of the task (EnumeratorOption)
  priority         EnumeratorOption? @relation("TaskPriority", fields: [priorityId], references: [id])
  /// The status ID of the task (EnumeratorOptionId)
  statusId         Int
  /// The status of the task (EnumeratorOption)
  status           EnumeratorOption  @relation("TaskStatus", fields: [statusId], references: [id])
  /// Tags
  tags             Tag[]
  /// The task type ID (EnumeratorOptionId)
  typeId           Int
  /// The task type (EnumeratorOption)
  type             EnumeratorOption  @relation("TaskType", fields: [typeId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('all', true)
model Comment {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @id() @default(autoincrement())
  /// The message
  /// @zod.string.min(1)
  message         String
  /// The children comments
  children        Comment[] @relation("CommentToComment")
  files           File[]
  /// The instance ID this comment belongs to
  instanceId      Int
  /// The instance this comment belongs to
  instance        Instance  @relation(fields: [instanceId], references: [id])
  /// The user ID who created this comment
  parentId        Int?
  /// The parent comment
  parent          Comment?  @relation("CommentToComment", fields: [parentId], references: [id])
  /// The task ID this comment belongs to
  taskId          Int?
  /// The task this comment belongs to
  task            Task?     @relation(fields: [taskId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('read', instance.ownerId == auth().id || instance.users?[accountId == auth().id])
/// @@allow('create', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'tag:create' || name == 'all:create']]])
/// @@allow('update', true)
model Tag {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime   @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean    @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int        @id() @default(autoincrement())
  /// Tag name
  name            String
  /// Tag description
  description     String?
  /// Style of the option
  /// [IStyle]
  style           Json?
  /// Activities that have this tag
  activities      Activity[]
  /// The instance ID this enumerator belongs to
  instanceId      Int
  /// The instance this enumerator belongs to
  instance        Instance   @relation(fields: [instanceId], references: [id])
  /// The tasks that have this tag
  tasks           Task[]
}

/// @@allow('delete', true)
/// @@allow('all', true)
model TaskAssignment {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @unique() @default(autoincrement())
  /// The user ID of this assignment
  userId          Int
  /// User of this assignment
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  /// The task ID of this assignment
  taskId          Int
  /// Task of this assignment
  task            Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id(name: "compositeId", fields: [userId, taskId])
}

/// @@allow('delete', true)
/// @@allow('read', board.instance.ownerId == auth().id || createdById == auth().id || (access == 'PUBLIC' && board.instance.users?[accountId == auth().id]))
/// @@allow('create', board.instance.ownerId == auth().id || board.instance.users?[accountId == auth().id])
/// @@allow('update', board.instance.ownerId == auth().id || createdById == auth().id || (access == 'PUBLIC' && board.instance.users?[accountId == auth().id]))
model BoardLayout {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime          @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean           @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int               @id() @default(autoincrement())
  /// The name of the layout
  name            String
  /// The description of the layout
  description     String?
  /// The schema of the layout
  /// [IBoardLayoutSchema]
  schema          Json
  /// Whether the layout is public or not
  access          BoardLayoutAccess @default(PRIVATE)
  /// Whether the layout is the default layout for the board
  isDefault       Boolean           @default(false)
  /// The board ID that this layout belongs to
  boardId         Int
  /// The board that this layout belongs to
  board           Board             @relation(fields: [boardId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('read', instance.ownerId == auth().id || instance.users?[accountId == auth().id])
/// @@allow('create', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'enumerator:create' || name == 'all:create']]])
/// @@allow('update', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'enumerator:update' || name == 'all:update']]])
model Enumerator {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime           @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean            @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int                @id() @default(autoincrement())
  /// The name of the enumerator
  /// @zod.string.min(1)
  name            String
  /// Description of the enumerator
  description     String?
  /// Internal name of the enumerator for system use
  internalName    String?
  /// The instance ID this enumerator belongs to
  instanceId      Int
  /// The instance this enumerator belongs to
  instance        Instance           @relation(fields: [instanceId], references: [id])
  /// The options of the enumerator
  options         EnumeratorOption[]

  @@index([internalName])
}

/// @@allow('delete', true)
/// @@allow('all', true)
model Workflow {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt         DateTime           @default(now())
  /// Identifier of the account who created the record
  createdById       Int?
  /// Identifier of the user who created the record
  createdByUserId   Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt         DateTime?
  /// Identifier of the account who last updated the record
  updatedById       Int?
  /// Identifier of the user who last updated the record
  updatedByUserId   Int?
  /// Indicates whether the record is marked as deleted
  deleted           Boolean            @default(false)
  /// Date and time of deletion of the record
  deletedAt         DateTime?
  /// Identifier of the account who deleted the record
  deletedById       Int?
  /// Identifier of the user who deleted the record
  deletedByUserId   Int?
  id                Int                @id() @default(autoincrement())
  /// Name of the workflow
  name              String
  /// The condition that needs to be met for the workflow to be executed (Based on query builder filter)
  /// [IWorkflowCondition]
  condition         Json[]
  /// The action that is executed when the condition is met
  /// [IWokflowAction]
  action            Json[]
  /// The instance ID this workflow belongs to
  instanceId        Int
  /// The instance this workflow belongs to
  instance          Instance           @relation(fields: [instanceId], references: [id])
  /// The enumerator option that this workflow belongs to
  enumeratorOptions EnumeratorOption[]
}

/// @@allow('delete', true)
/// @@allow('read,update', true)
/// @@deny('create,delete', true)
model Claim {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @id() @default(autoincrement())
  /// @deny('update', true)
  /// Name of the claim
  /// @zod.string.min(1)
  name            String    @unique()
  /// @deny('update', true)
  /// Description of the claim
  description     String?
  /// Roles that have this claim
  roles           Role[]
}

/// @@allow('delete', true)
/// @@allow('read', instance.ownerId == auth().id || instance.users?[accountId == auth().id])
/// @@allow('create', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'role:create' || name == 'all:create']]])
/// @@allow('update', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'role:update' || name == 'role:assign' || name == 'all:update']]])
model Role {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @id() @default(autoincrement())
  /// Role name
  /// @zod.string.min(1)
  name            String
  /// Role description
  description     String?
  /// Claims that this role has
  claims          Claim[]
  /// Instance ID
  instanceId      Int
  /// Instance
  instance        Instance  @relation(fields: [instanceId], references: [id])
  /// Users that have this role
  users           User[]
}

/// @@allow('delete', true)
/// @@allow('read', user.accountId == auth().id)
model UserOptions {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @id() @default(autoincrement())
  /// The user ID that these options belong to
  userId          Int       @unique()
  /// The user that these options belong to
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('delete', true)
/// @@allow('read', instance.ownerId == auth().id || instance.users?[accountId == auth().id] || email == auth().email)
/// @@allow('create', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'userInvitation:create' || name == 'all:create']]])
/// @@allow('update', instance.ownerId == auth().id || email == auth().email || instance.users?[accountId == auth().id && roles?[claims?[name == 'userInvitation:update' || name == 'all:update']]])
model UserInvitation {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime             @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean              @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int                  @unique() @default(autoincrement())
  /// The dateime when the invitation was accepted
  acceptedAt      DateTime?
  /// Deny reason
  denyReason      String?
  /// The email of the invited user
  /// @zod.string.min(1)
  email           String
  /// The status of the invitation
  status          UserInvitationStatus
  /// The token that is used for the invitation
  /// @zod.custom.omit([input])
  token           String               @unique()
  /// The Datetime until which the invitation is valid
  /// Note: The invitation is not valid when the `acceptedAt` is already set
  validUntil      DateTime
  /// The instance ID this enumerator belongs to
  instanceId      Int
  /// The instance this enumerator belongs to
  instance        Instance             @relation(fields: [instanceId], references: [id])
  /// The user ID of the invitation
  userId          Int                  @unique()
  /// The instance of the invitation
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id(name: "compositeId", fields: [instanceId, email])
}

/// @@allow('delete', true)
/// @@allow('read', user.accountId == auth().id || (isPublic && user.instance.users?[accountId == auth().id]))
/// @@allow('create', !!auth())
/// @@allow('update', user.accountId == auth().id || (isPublic && user.instance.users?[accountId == auth().id]))
model TableLayout {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @id() @default(autoincrement())
  /// Name of the table layout
  name            String
  isPublic        Boolean   @default(false)
  /// Name of the table
  tableName       String
  /// Schema of the table
  schema          String
  /// The instance ID for which the table layout is created
  instanceId      Int?
  /// The instance for which the table layout is created
  instance        Instance? @relation(fields: [instanceId], references: [id])
  /// The user ID for which the table layout is created
  userId          Int?
  /// The user for which the table layout is created
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('delete', true)
/// @@allow('read', activity.organization.users?[user.accountId == auth().id])
model ActivityStaffRequirement {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt                        DateTime                  @default(now())
  /// Identifier of the account who created the record
  createdById                      Int?
  /// Identifier of the user who created the record
  createdByUserId                  Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt                        DateTime?
  /// Identifier of the account who last updated the record
  updatedById                      Int?
  /// Identifier of the user who last updated the record
  updatedByUserId                  Int?
  /// Indicates whether the record is marked as deleted
  deleted                          Boolean                   @default(false)
  /// Date and time of deletion of the record
  deletedAt                        DateTime?
  /// Identifier of the account who deleted the record
  deletedById                      Int?
  /// Identifier of the user who deleted the record
  deletedByUserId                  Int?
  id                               Int                       @id() @default(autoincrement())
  /// The minimum number of staff required for this activity
  /// @zod.number.min(0)
  minimum                          Int
  /// The maximum number of staff required for this activity
  /// @zod.number.min(0)
  maximum                          Int
  /// The activity ID that this staff requirement is for
  activityId                       Int
  /// The activity that this staff requirement is for
  activity                         Activity                  @relation(fields: [activityId], references: [id])
  /// The users that are assigned to this activity requirement
  usersOnActivityStaffRequirements ActivityStaffAssignment[]
}

/// @@allow('delete', true)
/// @@allow('read', instance.users?[accountId == auth().id])
model Planning {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt                DateTime                  @default(now())
  /// Identifier of the account who created the record
  createdById              Int?
  /// Identifier of the user who created the record
  createdByUserId          Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt                DateTime?
  /// Identifier of the account who last updated the record
  updatedById              Int?
  /// Identifier of the user who last updated the record
  updatedByUserId          Int?
  /// Indicates whether the record is marked as deleted
  deleted                  Boolean                   @default(false)
  /// Date and time of deletion of the record
  deletedAt                DateTime?
  /// Identifier of the account who deleted the record
  deletedById              Int?
  /// Identifier of the user who deleted the record
  deletedByUserId          Int?
  id                       Int                       @id() @default(autoincrement())
  /// Planning name
  /// @z.string.min(1)
  name                     String
  /// Actvities that this planning is used for
  activities               Activity[]
  /// The instance ID that this planning belongs to
  instanceId               Int
  /// The instance that this planning belongs to
  instance                 Instance                  @relation(fields: [instanceId], references: [id])
  /// N-N relation between planning and planning stages
  planningStagesOnPlanning PlanningStageOnPlanning[]
}

/// @@allow('delete', true)
/// @@allow('read', planning.instance.users?[accountId == auth().id])
model PlanningStageOnPlanning {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime      @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean       @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int           @unique() @default(autoincrement())
  /// The order of the stage in the planning
  order           Int
  /// Planning ID that the stage is associated with
  planningId      Int
  /// Planning that the stage is associated with
  planning        Planning      @relation(fields: [planningId], references: [id])
  /// Planning stage ID that the stage is associated with
  planningStageId Int
  /// Planning stage that the stage is associated with
  planningStage   PlanningStage @relation(fields: [planningStageId], references: [id])

  @@id(name: "compositeId", fields: [planningId, planningStageId, order])
}

/// @@allow('delete', true)
/// @@allow('read', instance.users?[accountId == auth().id])
model PlanningStage {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt                DateTime                  @default(now())
  /// Identifier of the account who created the record
  createdById              Int?
  /// Identifier of the user who created the record
  createdByUserId          Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt                DateTime?
  /// Identifier of the account who last updated the record
  updatedById              Int?
  /// Identifier of the user who last updated the record
  updatedByUserId          Int?
  /// Indicates whether the record is marked as deleted
  deleted                  Boolean                   @default(false)
  /// Date and time of deletion of the record
  deletedAt                DateTime?
  /// Identifier of the account who deleted the record
  deletedById              Int?
  /// Identifier of the user who deleted the record
  deletedByUserId          Int?
  id                       Int                       @id() @default(autoincrement())
  /// Planning stage name
  /// @zod.string.min(1)
  name                     String
  /// Planning stage description
  description              String?
  /// Planning stage duration in ms
  /// @zod.number.min(0)
  duration                 Int
  /// Planning stage instance id
  instanceId               Int
  /// Planning stage instance
  instance                 Instance                  @relation(fields: [instanceId], references: [id])
  /// N-N relation between planning and planning stages
  planningStagesOnPlanning PlanningStageOnPlanning[]
  /// Planning stage rules
  planningStageRules       PlanningStageRule[]
}

/// @@allow('delete', true)
/// @@allow('read', true)
model PlanningStageRule {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime        @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean         @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int             @id() @default(autoincrement())
  /// The name of the rule
  /// @zod.string.min(1)
  name            String
  /// Instance ID
  instanceId      Int
  /// Instance
  instance        Instance        @relation(fields: [instanceId], references: [id])
  /// The planning stages that this rule applies to
  planningStages  PlanningStage[]
}

/// @@allow('delete', true)
/// @@allow('all', true)
model AiAgent {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt        DateTime      @default(now())
  /// Identifier of the account who created the record
  createdById      Int?
  /// Identifier of the user who created the record
  createdByUserId  Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt        DateTime?
  /// Identifier of the account who last updated the record
  updatedById      Int?
  /// Identifier of the user who last updated the record
  updatedByUserId  Int?
  /// Indicates whether the record is marked as deleted
  deleted          Boolean       @default(false)
  /// Date and time of deletion of the record
  deletedAt        DateTime?
  /// Identifier of the account who deleted the record
  deletedById      Int?
  /// Identifier of the user who deleted the record
  deletedByUserId  Int?
  id               Int           @id() @default(autoincrement())
  /// Name
  name             String
  /// Description
  description      String?
  /// Frequency penalty
  frequencyPenalty Float?
  /// Max steps
  maxSteps         Int?
  /// Max tokens
  maxTokens        Int?
  /// The default AI Model used by the agent
  model            String?
  /// Presence penalty
  presencePenalty  Float?
  /// System context
  system           String?
  /// Temperature
  temperature      Float?
  embeddings       AiEmbedding[]
  instanceId       Int
  /// Instance
  instance         Instance      @relation(fields: [instanceId], references: [id])
  /// Tools
  tools            AiTool[]
}

/// @@allow('delete', true)
/// @@allow('all', true)
model AiEmbedding {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime                     @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean                      @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int                          @id() @default(autoincrement())
  /// Content
  content         String
  /// Embedding
  embedding       Unsupported("vector(1536)")?
  /// Agents
  agents          AiAgent[]
  /// Instance ID
  instanceId      Int
  /// Instance
  instance        Instance                     @relation(fields: [instanceId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('all', true)
model AiTool {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @id() @default(autoincrement())
  /// Name
  name            String
  /// Description
  description     String?
  /// Content
  content         String
  /// Agents
  agents          AiAgent[]
  instanceId      Int
  /// Instance
  instance        Instance  @relation(fields: [instanceId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('all', true)
model AiThread {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime    @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean     @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int         @id() @default(autoincrement())
  /// Name
  name            String
  /// Agent setup
  setup           Json?
  /// RELATIONS
  /// Instance ID
  instanceId      Int
  /// Instance
  instance        Instance    @relation(fields: [instanceId], references: [id])
  /// Messages
  messages        AiMessage[]
}

/// @@allow('delete', true)
/// @@allow('all', true)
model AiMessage {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @id() @default(autoincrement())
  /// Message
  message         String
  /// Thread ID
  threadId        Int
  /// Thread
  thread          AiThread  @relation(fields: [threadId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('read', instance.ownerId == auth().id || instance.users?[accountId == auth().id])
/// @@allow('create', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'customField:create' || name == 'all:create']]])
/// @@allow('update', instance.ownerId == auth().id || instance.users?[accountId == auth().id && roles?[claims?[name == 'customField:update' || name == 'all:update']]])
model CustomField {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @id() @default(autoincrement())
  /// The name of the custom field
  name            String
  /// The description of the custom field
  description     String?
  /// The data type of the custom field
  dataType        String
  /// The entity that this custom field belongs to
  entity          String
  /// The entity ID that this custom field belongs to
  entityId        Int?
  /// The instance ID this custom field belongs to
  instanceId      Int
  /// The instance this custom field belongs to
  instance        Instance  @relation(fields: [instanceId], references: [id])
}

/// @@allow('delete', true)
/// @@allow('all', true)
model Log {
  /// Date and time when the record was created, the default value is the current date and time
  createdAt       DateTime  @default(now())
  /// Identifier of the account who created the record
  createdById     Int?
  /// Identifier of the user who created the record
  createdByUserId Int?
  /// Date and time of the last update of the record, the default value is the current date and time
  updatedAt       DateTime?
  /// Identifier of the account who last updated the record
  updatedById     Int?
  /// Identifier of the user who last updated the record
  updatedByUserId Int?
  /// Indicates whether the record is marked as deleted
  deleted         Boolean   @default(false)
  /// Date and time of deletion of the record
  deletedAt       DateTime?
  /// Identifier of the account who deleted the record
  deletedById     Int?
  /// Identifier of the user who deleted the record
  deletedByUserId Int?
  id              Int       @id() @default(autoincrement())
  /// ID of the entity that was affected
  entityId        Int
  /// The operation that was performed
  operation       String
  /// The entity that was affected (model)
  entity          String
  /// The difference/change
  diff            String
}
